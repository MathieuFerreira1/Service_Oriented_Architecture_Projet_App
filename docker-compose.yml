version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "echo", "ruok", "|", "nc", "localhost", "2181" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9092" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka_ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    networks:
      - app-network

  # Backend
  backend:
    build:
      context: ./backend
      dockerfile: ../docker/Dockerfile.backend
    environment:
      KAFKA_BROKERS: kafka:9092
    depends_on:
      zookeeper:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "3000:3000"  # Exposer le port backend
    networks:
      - app-network

  # Microfrontend Shell
  microfrontend-shell:
    build:
      context: ./frontend
      dockerfile: ../docker/Dockerfile.frontend-shell
    container_name: microfrontend-shell
    ports:
      - "4200:4200"  # Exposer le port pour l'app Auth
    networks:
      - app-network

  # Microfrontend Auth
  auth:
    build:
      context: ./frontend
      dockerfile: ../docker/Dockerfile.frontend-auth
    container_name: auth
    ports:
      - "4201:4201"  # Exposer le port pour l'app Auth
    networks:
      - app-network

  # Microfrontend Users
  users:
    build:
      context: ./frontend
      dockerfile: ../docker/Dockerfile.frontend-users
    container_name: users
    ports:
      - "4202:4202"  # Exposer le port pour l'app Auth
    networks:
      - app-network

  # Microfrontend Messages
  messages:
    build:
      context: ./frontend
      dockerfile: ../docker/Dockerfile.frontend-messages
    container_name: messages
    ports:
      - "4203:4203"  # Exposer le port pour l'app Auth
    networks:
      - app-network

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: nginx
    build:
      context: .
      dockerfile: docker/nginx.conf
    ports:
      - "80:80"
    depends_on:
      - microfrontend-shell
      - auth
      - users
      - messages
    networks:
      - app-network

networks:
  app-network:
    driver: bridge